name : Testing Releases

on:
  push:
    branches: [main]

jobs:
  Testing_Releases:
    name: Testing Releases
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          node-version: 16
      # - name: coping readme file to s3 bucket
      #   run : aws s3 cp README.md s3://mskrishna2808
      # - name: coping text file to s3 bucket
      #   run : aws s3 cp release.txt s3://mskrishna2808
      - name: jira fix version
        id: jira_fix_version
        run: |
          sudo apt update -y
          sudo apt install jq -y
          echo "======================================================================================"
          JIRA_URL="https://devopsexpert.atlassian.net/rest/api/latest/issue/DEV-1?fields=fixVersions"
          echo "======================================================================================"
          echo $JIRA_URL
          echo "======================================================================================"
          RELEASE_NUMBER=$(curl --request GET --basic --user ${{ secrets.SVC_JIRA_USERNAME }}:${{ secrets.SVC_JIRA_PASSWORD }} --url ${JIRA_URL} | jq '.fields.fixVersions[].name')
          echo "======================================================================================"
          echo $RELEASE_NUMBER
          echo "======================================================================================"
          echo "::set-output name=release-number::$(echo $RELEASE_NUMBER)"

      # - name: Get Release Version
      #   run: |
      #     echo "running on branch ${GITHUB_REF##*/}"
      #     echo "GITHUB_HEAD_REF branch ${GITHUB_HEAD_REF}"
      #     echo "input  SOURCE_BRANCH : ${{ github.event.inputs.SOURCE_BRANCH }}"
      #     if [ "${{ github.event.inputs.SOURCE_BRANCH }}" = "main" ]; then SOURCE_BRANCH=$(echo ${{ github.event.inputs.SOURCE_BRANCH }} | head -n1 | awk '{print $1;}' | cut -d_ -f1); fi;
      #     if [ -z "${SOURCE_BRANCH}" ];then SOURCE_BRANCH=$(echo ${GITHUB_HEAD_REF##*/} | head -n1 | awk '{print $1;}' | cut -d_ -f1);  fi;
      #     if [ -z "${SOURCE_BRANCH}" ];then SOURCE_BRANCH=$(echo ${GITHUB_REF##*/} | head -n1 | awk '{print $1;}' | cut -d_ -f1); fi;
      #     if [ -z "${SOURCE_BRANCH}" ]; then echo "Source branch is missing";exit 1;fi;
      #     echo "SOURCE_BRANCH is $SOURCE_BRANCH"
      #     echo "SOURCE_BRANCH=$SOURCE_BRANCH" >> $GITHUB_ENV

      - name: Creating tags
        id: release-tag-output
        run: |
          _DATE_=$(date +%Y%m%d_%H%M%S)
          TAG_DATE=$(echo "$_DATE_"|sed -e 's/_//g')
          RELEASE_TAG=${{ steps.jira_fix_version.outputs.release-number }}.$TAG_DATE
          echo "::set-output name=release-tag::$(echo $RELEASE_TAG)"
          git tag $RELEASE_TAG

      - name: Creating Releases
        id: release-tag-final
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.API_TOKEN }}
        with:
          tag_name: ${{ steps.release-tag-output.outputs.release-tag }}
          release_name: ${{ steps.release-tag-output.outputs.release-tag }}
          prerelease: true
